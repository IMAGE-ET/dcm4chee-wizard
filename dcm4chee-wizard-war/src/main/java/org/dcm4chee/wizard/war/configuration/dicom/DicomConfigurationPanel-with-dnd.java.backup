/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is part of dcm4che, an implementation of DICOM(TM) in
 * Java(TM), hosted at http://sourceforge.net/projects/dcm4che.
 *
 * The Initial Developer of the Original Code is
 * Agfa-Gevaert AG.
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * See listed authors below.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package org.dcm4chee.wizard.war.configuration.dicom;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.naming.NamingException;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;

import net.sf.json.JSONObject;

import org.apache.wicket.Application;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.Component;
import org.apache.wicket.ajax.AjaxEventBehavior;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.IAjaxCallDecorator;
import org.apache.wicket.ajax.form.OnChangeAjaxBehavior;
import org.apache.wicket.ajax.markup.html.AjaxFallbackLink;
import org.apache.wicket.ajax.markup.html.form.AjaxButton;
import org.apache.wicket.behavior.AttributeAppender;
import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;
import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;
import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;
import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;
import org.apache.wicket.extensions.markup.html.tree.Tree;
import org.apache.wicket.markup.html.IHeaderResponse;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.Button;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.markup.html.image.Image;
import org.apache.wicket.markup.html.list.ListItem;
import org.apache.wicket.markup.html.list.ListView;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.markup.repeater.Item;
import org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy;
import org.apache.wicket.markup.repeater.data.DataView;
import org.apache.wicket.markup.repeater.data.ListDataProvider;
import org.apache.wicket.model.AbstractReadOnlyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.PropertyModel;
import org.apache.wicket.model.ResourceModel;
import org.apache.wicket.model.util.ListModel;
import org.apache.wicket.request.resource.PackageResourceReference;
import org.apache.wicket.request.resource.ResourceReference;
import org.apache.wicket.util.string.AppendingStringBuffer;
import org.dcm4che.conf.api.ConfigurationException;
import org.dcm4che.conf.ldap.LdapEnv;
import org.dcm4che.net.ApplicationEntity;
import org.dcm4che.net.Connection;
import org.dcm4che.net.Device;
import org.dcm4chee.icons.ImageManager;
import org.dcm4chee.icons.behaviours.ImageSizeBehaviour;
import org.dcm4chee.proxy.mc.conf.ldap.LdapProxyConfiguration;
import org.dcm4chee.web.common.ajax.MaskingAjaxCallBehavior;
import org.dcm4chee.web.common.behaviours.TooltipBehaviour;
import org.dcm4chee.web.common.markup.BaseForm;
import org.dcm4chee.wizard.war.configuration.source.DicomConfigurationSourceModel;
import org.ejb3unit.hsqldb.lib.Iterator;
import org.jboss.bootstrap.api.as.config.JBossASBasedServerConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

//import wicketdnd.DragSource;
//import wicketdnd.DropTarget;
//import wicketdnd.Location;
//import wicketdnd.Operation;
//import wicketdnd.Reject;
//import wicketdnd.Transfer;
import wickettree.DefaultTableTree;
import wickettree.TableTree;
import wickettree.table.TreeColumn;

public class DicomConfigurationPanel extends Panel {

    private static final long serialVersionUID = 1L;
    
    private static final ResourceReference CSS = new PackageResourceReference(DicomConfigurationPanel.class, "folder-style.css");
    
    private static final String MODULE_NAME = "dicom";

    private static Logger log = LoggerFactory.getLogger(DicomConfigurationPanel.class);
    
    private List<WebMarkupContainer> searchTableComponents = new ArrayList<WebMarkupContainer>();

    final MaskingAjaxCallBehavior macb = new MaskingAjaxCallBehavior();

	private BaseForm form;
	private boolean connected;
	private boolean connectFailed;

	Model<DicomConfigurationSourceModel> model = new Model<DicomConfigurationSourceModel>();
	
	private ListModel<DeviceModel> deviceList = new ListModel<DeviceModel>(new ArrayList<DeviceModel>());
	private ListModel<ApplicationEntityModel> aeList = new ListModel<ApplicationEntityModel>(new ArrayList<ApplicationEntityModel>());
	
	TextField<String> x;
	
	// EXAMPLE
//	private List<Operation> operations;
//	private List<Operation> dragOperations = new ArrayList<Operation>();
//	private List<Operation> dropOperations = new ArrayList<Operation>();
//	private String[] types = new String[] { Transfer.ANY };

    public DicomConfigurationPanel(final String id) {
        super(id);

    	// EXAMPLE
//		operations = new ArrayList<Operation>();
//		operations.addAll(EnumSet.allOf(Operation.class));
//		dragOperations.addAll(operations);
//		dropOperations.addAll(operations);

		
        add(macb);
        connected = false;
        connectFailed = false;

        add(form = new BaseForm("form"));//, new CompoundPropertyModel<Object>()));
        form.setResourceIdPrefix("dicom.");
        form.add(new Label("connect.title", new Model<String>() {
        	
			private static final long serialVersionUID = 1L;

			@Override
			public String getObject() {
System.out.println("GET OBJECT: " + connectFailed + " " + connected);
				return Application.get().getResourceSettings().getLocalizer()
						.getString(connectFailed ? "dicom.connectFailed.title" : 
							connected ? "dicom.connected.title" : "dicom.connect.title", 
								DicomConfigurationPanel.this, "dicom.connect.title");
			}
        }).add(new AttributeAppender("class", 
        		new AbstractReadOnlyModel<String>() {

					private static final long serialVersionUID = 1L;
					
					@Override
					public String getObject() {
						return connectFailed ? "error" : "text"; 
					}
        		})));
        
//        		new ResourceModel(connected ? "dicom.connected.title" : "dicom.connect.title")));
        form.add(new AjaxFallbackLink<Object>("connectToggle") {

            private static final long serialVersionUID = 1L;

            @Override
            public void onClick(AjaxRequestTarget target) {
                connected = !connected;
                for (WebMarkupContainer wmc : searchTableComponents)
                    wmc.setVisible(!connected);               
                target.add(form);
            }
        }
        .add((new Image("connectToggleImg", new AbstractReadOnlyModel<ResourceReference>() {

                private static final long serialVersionUID = 1L;

                @Override
                public ResourceReference getObject() {
                    return connected ? ImageManager.IMAGE_COMMON_COLLAPSE : 
                        ImageManager.IMAGE_COMMON_EXPAND;
                }
        })
        .add(new TooltipBehaviour("dicom.", "connectToggleImg", new AbstractReadOnlyModel<Boolean>() {

            private static final long serialVersionUID = 1L;

            @Override
            public Boolean getObject() {
                return !connected;
            }
        })))
        .add(new ImageSizeBehaviour())));
        
        searchTableComponents.add(form.createAjaxParent("connectFields"));
        
		IModel<? extends List<? extends Object>> choices = new ListModel<DicomConfigurationSourceModel>(updateDicomConfigurationList());
        form.addDropDownChoice("dcs-name", model, choices, new Model<Boolean>(true), true).setNullValid(false);
        if (choices.getObject().size() > 0)
        	model.setObject((DicomConfigurationSourceModel) choices.getObject().get(0));
        
        IndicatingAjaxButton connectBtn = new IndicatingAjaxButton("connectBtn") {

            private static final long serialVersionUID = 1L;
            
            @Override
            protected void onSubmit(AjaxRequestTarget target, Form<?> form) {
            	try {
					queryDicomConfigurationSource();

					connected = true;
	            	connectFailed = false;
	            	
	                for (WebMarkupContainer wmc : searchTableComponents)
	                    wmc.setVisible(!connected);               

				} catch (NamingException e) {
					onError(target, form);
				} catch (ConfigurationException e) {
					onError(target, form);
				}
            	                
            	target.add(form);
//                getPage().setOutputMarkupId(true);
//            	target.add(getPage());
            }
            
            @Override
            public void onError(AjaxRequestTarget target, Form<?> form) {
            	System.out.println("onError");
                connected = false;
                connectFailed = true;
            	BaseForm.addInvalidComponentsToAjaxRequestTarget(target, form);
            }
            
            @Override
            protected IAjaxCallDecorator getAjaxCallDecorator() {
                try {
                    return macb.getAjaxCallDecorator();
                } catch (Exception e) {
                    log.error("Failed to get IAjaxCallDecorator: ", e);
                }
                return null;
            }
        };
        connectBtn.setOutputMarkupId(true);
        connectBtn.add(new Image("connectImg",ImageManager.IMAGE_COMMON_SEARCH)
            .add(new ImageSizeBehaviour("vertical-align: middle;"))
        );
        connectBtn.add(new Label("connectText", new ResourceModel("dicom.connectFields.connectBtn.text"))
            .add(new AttributeModifier("style", new Model<String>("vertical-align: middle;")))
            .setOutputMarkupId(true)
        );
        form.addComponent(connectBtn);
        form.setDefaultButton(connectBtn);
        
        form.add(new Label("devices.label", new ResourceModel("dicom.devices.label")));
    	final ListView<DeviceModel> devicesView = new ListView<DeviceModel>("devicesList", deviceList) {

        			private static final long serialVersionUID = 1L;

                    @Override
                    protected void populateItem(ListItem<DeviceModel> item){
                        final DeviceModel deviceModel = item.getModelObject();
                        
                        String display = deviceModel.getDeviceName() + " ";
                        for (Connection connection : deviceModel.getConnections())
                        		display += ("C:" + connection.getCommonName() + " ");                        
                        for (ApplicationEntityModel ae : deviceModel.getApplicationEntities())
                    		display += ("A:" + ae.getAeTitle() + " ");
                        
                        item.add(new Label("name", display)
                        .add(new AttributeModifier("title", deviceModel.getDescription())));
                    }
                };
        devicesView.setOutputMarkupId(true);
        form.add(devicesView);
                
        form.add(new Label("aets.label", new ResourceModel("dicom.aets.label")));
        final ListView<ApplicationEntityModel> aetsView = new ListView<ApplicationEntityModel>("aetsList", aeList) {

                	private static final long serialVersionUID = 1L;

                    @Override
                    protected void populateItem(ListItem<ApplicationEntityModel> item){
                    	final ApplicationEntityModel applicationEntityModel = item.getModelObject();
                        item.add(new Label("name", applicationEntityModel.getAeTitle())
                        .add(new AttributeModifier("title", applicationEntityModel.getDescription())));
                    }
        		};
        aetsView.setOutputMarkupId(true);
        form.add(aetsView);
        form.setOutputMarkupId(true);
        
        devicesView.setOutputMarkupPlaceholderTag(true);
        aetsView.setOutputMarkupPlaceholderTag(true);

generateTree();
    }

	private List<IColumn<DeviceTreeNode>> columns()
	{
		List<IColumn<DeviceTreeNode>> columns = new ArrayList<IColumn<DeviceTreeNode>>();
		
		columns.add(new TreeColumn<DeviceTreeNode>(Model.of("Name")));
		columns.add(new PropertyColumn<DeviceTreeNode>(Model.of("Name"), "name"));
		
		return columns;
	}

    @Override
    public void onBeforeRender() {
    	super.onBeforeRender();
    	System.out.println("on before render: " + connected);
    	generateTree();
//        devicesView.setVisible(connected);
//        aetsView.setVisible(connected);
    }
    
    @Override
    public void renderHead(IHeaderResponse response) {
    	if (DicomConfigurationPanel.CSS != null)
    		response.renderCSSReference(DicomConfigurationPanel.CSS);
    }

    protected List<DicomConfigurationSourceModel> updateDicomConfigurationList() {
        String line;
        BufferedReader reader = null;
        List<DicomConfigurationSourceModel> updatedList = new ArrayList<DicomConfigurationSourceModel>();
        try {
        	String fn = System.getProperty("dcm4chee-web3.cfg.path", "conf/dcm4chee-web3/");
        	if (fn == null)
				throw new FileNotFoundException("Web config path not found! Not specified with System property 'dcm4chee-web3.cfg.path'");
	        File configFile = new File(fn + "dicom-configuration.json");
	        if (!configFile.isAbsolute())
	            configFile = new File(System.getProperty(JBossASBasedServerConfig.PROP_KEY_JBOSSAS_SERVER_HOME_DIR), configFile.getPath());

        	reader = new BufferedReader(new FileReader(configFile));
            while ((line = reader.readLine()) != null) 
            	updatedList.add((DicomConfigurationSourceModel) JSONObject.toBean(JSONObject.fromObject(line), DicomConfigurationSourceModel.class));
            
		} catch (IOException ioe) {
			log.error("Error updating dicom configuration list: ", ioe);
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ignore) {}
            }
        }
        return updatedList;
    }

    void queryDicomConfigurationSource() throws NamingException, ConfigurationException {
    	System.out.println("SUBMIT");
    	DicomConfigurationSourceModel dcs = model.getObject();
    	if (dcs != null) {
    		System.out.println("CONNECTING");
    		
            LdapEnv env = new LdapEnv();
            env.setUrl("ldap://" + dcs.getHost() + ":" + dcs.getPort());
//            env.setUserDN("cn=admin,dc=nodomain"); //slapd
            env.setUserDN("cn=" + dcs.getCn()); //OpenDJ
            env.setPassword(dcs.getPassword());

				LdapProxyConfiguration config = new LdapProxyConfiguration(env, "dc=" + dcs.getDc());
				
//				TreeNode dc = new DefaultMutableTreeNode("dc=" + dcs.getDc());
//				TreeNode configurationRoot = new DefaultMutableTreeNode(config.getConfigurationRoot());
				
//				TreeModel treeModel = new DefaultTreeModel();	
				
//System.out.println(config.getConfigurationRoot());
//try {
//
//	ApplicationEntity ae = config.findApplicationEntity("DCM4CHEE-PROXY");
//	ae.
//} catch (ConfigurationException e) {
//	// TODO Auto-generated catch block
//	e.printStackTrace();

				Set<ApplicationEntityModel> aeSet = new HashSet<ApplicationEntityModel>();
				
				deviceList.getObject().clear();
				for (String deviceName : Arrays.asList(config.listDeviceNames())) {
					Device device = config.findDevice(deviceName);
					// device
					DeviceModel deviceModel = new DeviceModel(deviceName, device.getDescription(), 
							device.listConnections(), device.getApplicationEntities());
					deviceList.getObject().add(deviceModel);
					// its aets
System.out.println("-> aes: " + device.getApplicationEntities());

	aeSet.addAll(deviceModel.getApplicationEntities());
//					java.util.Iterator<ApplicationEntity> i = device.getApplicationEntities().iterator();
//					while(i.hasNext()) {
//						aeSet.add(new ApplicationEntityModel(i.next().getAETitle()));
//						System.out.println("AE: " + i.next().getAETitle());
//					}
						
//					for (ApplicationEntity ae : device.getApplicationEntities())
//						aeSet.add(new ApplicationEntityModel(ae.getAETitle()));		
				}
				aeList.getObject().clear();
				aeList.setObject(new ArrayList<ApplicationEntityModel>(aeSet));
//}

    	}
    }
    
	protected Set<Operation> dragOperations()
	{
		if (dragOperations.isEmpty())
		{
			return EnumSet.noneOf(Operation.class);
		}
		else
		{
			return EnumSet.copyOf(dragOperations);
		}
	}

	protected Set<Operation> dropOperations()
	{
		if (dropOperations.isEmpty())
		{
			return EnumSet.noneOf(Operation.class);
		}
		else
		{
			return EnumSet.copyOf(dropOperations);
		}
	}

	protected DeviceTreeNode operate(Transfer transfer)
	{
		DeviceTreeNode foo = transfer.getData();
		switch (transfer.getOperation())
		{
			case MOVE :
			case COPY :
				return foo.copy();
			case LINK :
				return foo.link();
			default :
				throw new IllegalArgumentException();
		}
	}

	public String[] types()
	{
		return types;
	}

	void generateTree() {
		final DeviceTreeProvider deviceTreeProvider = new DeviceTreeProvider(deviceList);

//		aetsView.add(new DragSource()
//		{
//			private static final long serialVersionUID = 1L;
//
//			@Override
//			public Set<Operation> getOperations()
//			{
//				return dragOperations();
//			}
//			
//			@Override
//			public String[] getTypes()
//			{
//				return types();
//			}
//
//			@Override
//			public void onAfterDrop(AjaxRequestTarget target, Transfer transfer)
//			{
//System.out.println("DragSource: DROPPED ITEM");
//				if (transfer.getOperation() == Operation.MOVE)
//				{
//					DeviceTreeNode foo = transfer.getData();
//
//					aetProvider.remove(foo);
//					
//					foo.remove();
//
//					target.add(aetsView);
//				}
//			}
//		}.drag("tr").initiate("span.tree-content"));
//
//		devicesView.add(new DropTarget()
//		{
//			@Override
//			public Set<Operation> getOperations()
//			{
//				return dropOperations();
//			}
//			
//			@Override
//			public String[] getTypes()
//			{
//				return types();
//			}
//
//			@Override
//			public void onDrag(AjaxRequestTarget target, Location location)
//			{
//				DeviceTreeNode foo = location.getModelObject();
////				tabletree.expand(foo);
//			}
//
//			@Override
//			public void onDrop(AjaxRequestTarget target, Transfer transfer, Location location)
//					throws Reject
//			{
//System.out.println("DropTarget: DROPPED ITEM");
////				if (location.getComponent() == tabletree)
//				if (location.getComponent() == devicesView)
//				{
//					DeviceTreeNode foo = location.getModelObject();
//					if (foo.isAncestor(transfer.getData())) {
//						transfer.reject();
//					}
//					
//					switch (location.getAnchor())
//					{
//						case CENTER :
//							if (foo == transfer.getData()) {
//								transfer.reject();
//							}
//							aetProvider.add(operate(transfer), foo);
//							tabletree.expand(foo);
//							break;
//						case TOP :
//							aetProvider.addBefore(operate(transfer), foo);
//							break;
//						case BOTTOM :
//							aetProvider.addAfter(operate(transfer), foo);
//							break;
//						default :
//							transfer.reject();
//					}
//
//					target.add(devicesView);
//				}
//			}
//		}.dropCenter("tr"));


// ******************************************************************
        
//		final DeviceTreeProvider provider = aetProvider;//new FooTreeProvider();
		
		final TableTree<DeviceTreeNode> tabletree = new DefaultTableTree<DeviceTreeNode>("tabletree", columns(),
				deviceTreeProvider, Integer.MAX_VALUE);
		// reuse items or drop following expansion will fail due to new
		// markup ids
		tabletree.setItemReuseStrategy(new ReuseIfModelsEqualStrategy());
		tabletree.add(new DragSource()
		{
			@Override
			public Set<Operation> getOperations()
			{
				return dragOperations();
			}
			
			@Override
			public String[] getTypes()
			{
				return types();
			}

			@Override
			public void onAfterDrop(AjaxRequestTarget target, Transfer transfer)
			{
				if (transfer.getOperation() == Operation.MOVE)
				{
					DeviceTreeNode foo = transfer.getData();

					deviceTreeProvider.remove(foo);
					
					foo.remove();

					target.add(tabletree);
				}
			}
		}.drag("tr").initiate("span.tree-content"));
		tabletree.add(new DropTarget()
		{
			@Override
			public Set<Operation> getOperations()
			{
				return dropOperations();
			}
			
			@Override
			public String[] getTypes()
			{
				return types();
			}

			@Override
			public void onDrag(AjaxRequestTarget target, Location location)
			{
				DeviceTreeNode foo = location.getModelObject();
				tabletree.expand(foo);
			}

			@Override
			public void onDrop(AjaxRequestTarget target, Transfer transfer, Location location)
					throws Reject
			{
				if (location.getComponent() == tabletree)
				{
					DeviceTreeNode foo = location.getModelObject();
					if (foo.isAncestor(transfer.getData())) {
						transfer.reject();
					}
					
					switch (location.getAnchor())
					{
						case CENTER :
							if (foo == transfer.getData()) {
								transfer.reject();
							}
							deviceTreeProvider.add(operate(transfer), foo);
							tabletree.expand(foo);
							break;
						case TOP :
							deviceTreeProvider.addBefore(operate(transfer), foo);
							break;
						case BOTTOM :
							deviceTreeProvider.addAfter(operate(transfer), foo);
							break;
						default :
							transfer.reject();
					}

					target.add(tabletree);
				}
			}
		}.dropCenter("tr"));
		
		form.addOrReplace(tabletree);
	}
	
    public static String getModuleName() {
        return MODULE_NAME;
    }
}
